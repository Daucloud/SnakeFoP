#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <cctype>
#include <algorithm>

using namespace std;

const int MAX_ROW = 20;
const int MAX_COL = 20;

// 地图结构体
struct Map {
  int rows, cols;
  vector<vector<char>> grid;
  vector<pair<int, int>> obstacles;
  int wall_status[4] = {1, 1, 1, 1}; // 上、左、下、右四面墙的虚实设定
};

// 判断一个位置是否为障碍物
bool is_obstacle(const Map& map, int row, int col) {
  return find(map.obstacles.begin(), map.obstacles.end(), make_pair(row, col)) != map.obstacles.end();
}

// 判断一个位置是否为墙
bool is_wall(const Map& map, int row, int col, int direction) {
  switch (direction) {
      case 0: // 上
          return map.wall_status[0] == 1 && row == 0;
      case 1: // 左
          return map.wall_status[1] == 1 && col == 0;
      case 2: // 下
          return map.wall_status[2] == 1 && row == map.rows - 1;
      case 3: // 右
          return map.wall_status[3] == 1 && col == map.cols - 1;
      default:
          return false;
  }
}

// 清除命令行
void clear_console() {
  system("cls");
}

// 绘制地图
void draw_map(const Map& map) {
  clear_console();
  cout << "+" << string(map.cols * 2 - 1, '-') << "+\n";
  for (int i = 0; i < map.rows; ++i) {
      cout << "|";
      for (int j = 0; j < map.cols; ++j) {
          if (is_obstacle(map, i, j)) {
              cout << "*";
          } else if (is_wall(map, i, j, 0)) {
              cout << "|";
          } else if (is_wall(map, i, j, 1)) {
              cout << "-";
          } else if (is_wall(map, i, j, 2)) {
              cout << "|";
          } else if (is_wall(map, i, j, 3)) {
              cout << "-";
          } else {
              cout << " ";
          }
      }
      cout << "|\n";
  }
  cout << "+" << string(map.cols * 2 - 1, '-') << "+\n";
}

// 处理用户输入的指令
void process_instruction(Map& map, string instruction) {
   istringstream iss(instruction);
   char command = instruction[0];
   int x, y;
   switch (command) {
       case 'o':
           iss >> x >> y;
           if (x >= 0 && x < map.rows && y >= 0 && y < map.cols) {
               map.obstacles.push_back(make_pair(x, y));
               map.grid[x][y] = '*';
           } else {
               cout << "Error: Obstacle position out of range.\n";
           }
           break;
       case 'p':
           iss >> x >> y;
           if (x >= 0 && x < map.rows && y >= 0 && y < map.cols && find(map.obstacles.begin(), map.obstacles.end(), make_pair(x, y)) != map.obstacles.end()) {
               map.obstacles.erase(find(map.obstacles.begin(), map.obstacles.end(), make_pair(x, y)));
               map.grid[x][y] = ' ';
           } else {
               cout << "Error: Obstacle position not found.\n";
           }
           break;
       case 'w':
           iss >> x >> y;
           if (x >= 0 && x < map.rows && y >= 0 && y < map.cols) {
               map.wall_status[y] = !map.wall_status[y];
               if (map.wall_status[y]) {
                   map.grid[0][y] = '|';
                   map.grid[map.rows - 1][y] = '|';
               } else {
                   map.grid[0][y] = ' ';
                   map.grid[map.rows - 1][y] = ' ';
               }
           } else {
               cout << "Error: Wall position out of range.\n";
           }
           break;
       default:
           cout << "Error: Invalid command.\n";
           break;
   }
}
// 游戏记录回放
void _replay(const std::string& filename) {
  std::ifstream file(filename);
  if (!file.is_open()) {
      std::cout << "Error: Unable to open file." << std::endl;
      return;
  }

  char command;
  int x, y;
  while (file >> command >> x >> y) {
      switch (command) {
          case 'M':
              _CloseCursor(false);
              _PrintFood(width, height);
              _CloseCursor(true);
              break;
          case 'S':
              _CloseCursor(false);
              _PrintSnake(x, y);
              _CloseCursor(true);
              break;
          case 'E':
              _CloseCursor(false);
              _PrintEatenFood(x, y);
              _CloseCursor(true);
              break;
          default:
              break;
      }
  }
  file.close();
}

// 蛇的打印
void _PrintSnake(int x, int y) {
  _gotoxy(x, y);
  std::cout << "\e[31m*\e[0m";
}

// 吃到的食物的打印
void _PrintEatenFood(int x, int y) {
  _gotoxy(x, y);
  std::cout << "\e[32m*\e[0m";
}


